from typing import Optional


class ResponseData:
    http_status_explain = {
        # 1xx — информационные
        100: "Continue — сервер готов принять тело запроса (используется с Expect: 100-continue).",
        101: "Switching Protocols — сервер согласен переключиться на другой протокол (например, WebSocket).",
        102: "Processing — сервер ещё обрабатывает запрос (WebDAV).",
        103: "Early Hints — сервер посылает предварительные заголовки (например, Link) для оптимизации загрузки ресурсов.",

        # 2xx — успех
        200: "OK — запрос успешно обработан, в ответе присутствует тело (HTML/JSON и т.д.).",
        201: "Created — запрос создал новый ресурс; ответ может содержать заголовок Location с URI созданного ресурса.",
        202: "Accepted — запрос принят для обработки, но обработка выполняется асинхронно и ещё не завершена.",
        203: "Non-Authoritative Information — возвращённая информация не из оригинального источника (proxy/агрегатор).",
        204: "No Content — успех, но тело ответа отсутствует (например, результат DELETE).",
        205: "Reset Content — успех; клиент должен сбросить представление/форму.",
        206: "Partial Content — сервер вернул часть ресурса в ответ на Range-запрос.",
        207: "Multi-Status — расширение WebDAV: множественные статусы для разных частей запроса.",
        208: "Already Reported — WebDAV: элементы уже были перечислены ранее в ответе.",
        226: "IM Used — сервер выполнил запрос, используя Delta encoding (RFC 3229).",

        # 3xx — перенаправления
        300: "Multiple Choices — доступно несколько представлений ресурса; требуется выбор.",
        301: "Moved Permanently — ресурс перемещён навсегда; в ответе часто есть Location с новым URL.",
        302: "Found — временный редирект; запрашивающий должен использовать новый URL для этого запроса.",
        303: "See Other — ответ-редирект, клиент должен выполнить GET по указанному в Location URL.",
        304: "Not Modified — ресурс не изменился; используйте кеш клиента (ответ без тела).",
        305: "Use Proxy — (устаревшее) клиент должен использовать прокси, указанный в Location.",
        307: "Temporary Redirect — временный редирект; метод запроса сохраняется (POST остаётся POST).",
        308: "Permanent Redirect — постоянный редирект, метод запроса сохраняется (аналог 301 с сохранением метода).",

        # 4xx — ошибки клиента
        400: "Bad Request — неверный синтаксис или некорректные параметры запроса.",
        401: "Unauthorized — требуется аутентификация; нужно предоставить корректные учётные данные/токен.",
        402: "Payment Required — зарезервирован для платёжной аутентификации (чаще не используется).",
        403: "Forbidden — доступ к ресурсу запрещён, даже если клиент аутентифицирован.",
        404: "Not Found — запрашиваемый ресурс не найден по указанному URI.",
        405: "Method Not Allowed — указанный HTTP-метод не разрешён для этого ресурса.",
        406: "Not Acceptable — сервер не может выдать представление в запрошенных форматах (Accept).",
        407: "Proxy Authentication Required — требуется аутентификация у прокси.",
        408: "Request Timeout — клиент не успел отправить полный запрос в отведённое время.",
        409: "Conflict — конфликт состояния (например, дублирование ресурса или конфликт версий).",
        410: "Gone — ресурс был удалён и не доступен по этому URL больше.",
        411: "Length Required — сервер требует указать Content-Length в запросе.",
        412: "Precondition Failed — предусловие (If-*) не выполнено; запрос отклонён.",
        413: "Payload Too Large — тело запроса слишком велико для обработки сервером.",
        414: "URI Too Long — запрошенный URI слишком длинный для обработки.",
        415: "Unsupported Media Type — формат тела запроса не поддерживается сервером (некорректный Content-Type).",
        416: "Range Not Satisfiable — запрашиваемый диапазон (Range) не может быть удовлетворён.",
        417: "Expectation Failed — сервер не может выполнить ожидание, указанное в заголовке Expect.",
        418: "I'm a teapot — код-шутка из RFC 2324 (используется редко и на шутливых сервисах).",
        421: "Misdirected Request — запрос направлен серверу, который не может его обработать.",
        422: "Unprocessable Entity — сервер понимает формат, но не может обработать содержимое (валидация данных).",
        423: "Locked — ресурс заблокирован (WebDAV).",
        424: "Failed Dependency — операция не выполнена из-за неудачной зависимости (WebDAV).",
        425: "Too Early — сервер не хочет обрабатывать запрос, который может быть повторно выполнен позже.",
        426: "Upgrade Required — клиент должен переключиться на другой протокол (например TLS/2).",
        428: "Precondition Required — сервер требует предусловие (например, If-Match) для защиты от race-condition.",
        429: "Too Many Requests — клиент превысил лимит запросов; обычно в ответе даётся Retry-After.",
        431: "Request Header Fields Too Large — заголовки запроса слишком велики для обработки.",
        451: "Unavailable For Legal Reasons — доступ к ресурсу запрещён по юридическим причинам.",

        # 5xx — ошибки сервера
        500: "Internal Server Error — внутренняя ошибка сервера при обработке запроса.",
        501: "Not Implemented — сервер не поддерживает функциональность, необходимую для обработки запроса.",
        502: "Bad Gateway — сервер получил некорректный ответ от вышестоящего сервиса/шлюза.",
        503: "Service Unavailable — сервис временно недоступен (обслуживание или перегрузка); может быть Retry-After.",
        504: "Gateway Timeout — сервер-шлюз не дождался ответа от апстрим-сервиса.",
        505: "HTTP Version Not Supported — сервер не поддерживает указанную версию протокола HTTP.",
        506: "Variant Also Negotiates — конфигурационная ошибка в сервере (варианты контента конфигурируются неправильно).",
        507: "Insufficient Storage — на сервере недостаточно места для выполнения операции (WebDAV).",
        508: "Loop Detected — обнаружен цикл в обработке (WebDAV).",
        510: "Not Extended — требуется дополнительное расширение, чтобы обработать запрос.",
        511: "Network Authentication Required — требуется сетевая аутентификация (например, captive portal).",

        # 9хх - кастомные ошибки от меня лично
        900: "Статуса нет - Ошибка соединения\n\nSSL certificate validation failed: ",
        901: "Статуса нет - Ошибка соединения\n\nSSL/TLS handshake error: ",
        902: "Статуса нет - Ошибка соединения\n\nCertificate verification error: ",
        903: "Статуса нет - Ошибка соединения\n\nТаймаут соединения - Подключение заняло больше 15 секунд, проверьте доступность сайта",
        999: "Статуса нет - Ошибка соединения\n\nNetwork/connection error: ",
    }

    def __init__(self, url: str, status_code: int, explanation: str = ''):
        self.url = url
        self.status_code: int = status_code
        self.explanation = self.get_status_explanation() + explanation

    # Пример простого helper'а:
    def get_status_explanation(self, status_code: int = 0) -> str:
        """
        Возвращает объяснение для HTTP-кода; если кода нет в словаре — возвращает нейтральное сообщение.
        """
        return self.http_status_explain.get(
            self.status_code if not status_code else status_code,
            f"HTTP {self.status_code} — неизвестный или нестандартный статус; проверьте тело ответа и заголовки."
        )